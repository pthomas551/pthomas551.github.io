<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Phil Thomas</title>
 <link href="http://pthoma.se/atom.xml" rel="self"/>
 <link href="http://pthoma.se/"/>
 <updated>2015-12-21T00:57:56-06:00</updated>
 <id>http://pthoma.se</id>
 <author>
   <name>Phil Thomas</name>
   <email></email>
 </author>

 
 <entry>
   <title>Swift: An Introduction</title>
   <link href="http://pthoma.se/2015/12/13/swift-an-introduction/"/>
   <updated>2015-12-13T00:00:00-06:00</updated>
   <id>http://pthoma.se/2015/12/13/swift-an-introduction</id>
   <content type="html">&lt;p&gt;Swift is a new programming language introduced by Apple in 2014 and open-sourced in 2015. It&amp;#39;s intended to replace Objective-C as the primary development language for Apple operating systems and is rapidly increasing in popularity. I intend on studying some Swift after finishing &lt;a href=&quot;http://devbootcamp.com&quot;&gt;Dev Bootcamp&lt;/a&gt; so I thought it would be interesting to write a brief introduction to the language.&lt;/p&gt;

&lt;p&gt;To introduce Swift it&amp;#39;s first necessary to introduce Objective-C, its predecessor. Objective-C is a relatively old language; it was first introduced in 1983 and is based on the even older C programming language, which is still one of the foundations of modern software engineering. Obj-C initially popularized by Steve Jobs&amp;#39; company NeXT in the late 1980s and came to Apple with Apple&amp;#39;s acquisition of NeXT in 1996. It still retains many vestiges of its earlier life; for example, many Obj-C object type names begin with NS (as in NeXTStep, the NeXT operating system.) It also shares in common with C the need to manually incorporate header files before compiling even very simple programs.&lt;/p&gt;

&lt;p&gt;Swift seeks to be &amp;quot;Objective-C without the C&amp;quot; - that is, it seeks to retain the capabilities of Objective-C while incorporating recent developments and trends in programming as epitomized by the rize of scripting languages like Ruby and Python.&lt;/p&gt;

&lt;p&gt;Some interesting aspects of Swift include the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Fewer legacy conventions than Objective-C (eg. removal of the NS prefix) allowing for more readable and beginner-friendly syntax
&lt;/li&gt;
&lt;li&gt;
Automated memory management and improved performance, which removes much of the performance management burden from developers
&lt;/li&gt;
&lt;li&gt;
Uses type inference so variable type declarations are unnecessary in many cases - allowing for behavior closer to Ruby/Python
&lt;/li&gt;
&lt;li&gt;
Easy testing and feedback through the &quot;Playgrounds&quot; feature in XCode, which shows code output in real time
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The open-sourcing of Swift will only increase its adoption as it becomes available on platforms beyond OSX and iOS. It is likely to become one of the next decade&amp;#39;s top programming languages and as such is a good element of any developer&amp;#39;s arsenal. I look forward to experimenting with it soon!&lt;/p&gt;

&lt;p&gt;For more information you can check out the &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/&quot;&gt;Swift documentation&lt;/a&gt; at Apple&amp;#39;s developer site.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>JavaScript Constructor Functions</title>
   <link href="http://pthoma.se/2015/12/06/javascript-constructor-functions/"/>
   <updated>2015-12-06T00:00:00-06:00</updated>
   <id>http://pthoma.se/2015/12/06/javascript-constructor-functions</id>
   <content type="html">&lt;p&gt;&lt;em&gt;This post builds on my previous &lt;a href=&quot;/2015/11/29/classes-in-ruby/&quot;&gt;post on Ruby classes&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As I mentioned in my post on Ruby classes, in object-oriented programming, &lt;strong&gt;classes&lt;/strong&gt; are essentially templates for creating new objects. One way in which classes are very useful is that they allow you to create easily understanable representations of real-world objects in code.&lt;/p&gt;

&lt;p&gt;Ruby has the built-in &lt;strong&gt;class&lt;/strong&gt; object for creating classes. JavaScript does not have a class object like Ruby, but it does have a special type of function called a &lt;strong&gt;constructor function&lt;/strong&gt;, which replicates the function and features of the &lt;strong&gt;class&lt;/strong&gt; object. In this post we will do a quick review of Ruby class creation syntax, and then take a look at how we can replicate this using a JavaScript constructor function.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s review the Ruby class syntax first for comparison purposes. This is some possible syntax for a &lt;em&gt;Car&lt;/em&gt; object in Ruby. You can go to the &lt;a href=&quot;/2015/11/29/classes-in-ruby/&quot;&gt;previous post&lt;/a&gt; for an overview of how this syntax works.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt; 
&lt;span class=&quot;nx&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;make&lt;/span&gt; 
&lt;span class=&quot;nx&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt; 
&lt;span class=&quot;nx&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;year&lt;/span&gt; 
&lt;span class=&quot;nx&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;make&lt;/span&gt; 
&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt; 
&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;year&lt;/span&gt; 
&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt; 
&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let&amp;#39;s look at how we would create a slightly different object, say a US state object, using a JS constructor function:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;population&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foundedYear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;population&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;population&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foundedYear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foundedYear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This constructor created a State object with three instance variables; name, population, and year of foundation. As you can see, we did not define instance methods to access these variables; this is not necessary in JS, as we will demonstrate below. First, though, let&amp;#39;s go over how to create a new object from this constructor template:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;illinois&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Illinois&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12880580&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1818&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This code created a new State object called illinois with the three attributes of the constructor function contained in order within the parentheses. As you can see the syntax is very similar to creating new instances of a class in Ruby. The syntax for calling these instance attributes is very similar as well:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;illinois&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;#39;Illinois&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;illinois&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;population&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;12880580&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;illinois&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foundedYear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1818&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The main difference between this example and our Ruby example in the previous post is that we did not need to create methods for accessing these variables as we had to in Ruby.&lt;/p&gt;

&lt;p&gt;As you can see, there is not a great deal of difference between Ruby classes and JavaScript constructor functions. Perhaps the most important difference as laid out in this example is that in JS, instance attributes have read/write methods endowed on them by default; they do not need to be separately defined in the constructor function.&lt;/p&gt;

&lt;p&gt;In short, even if the syntax is not quite as intuitive, JS constructors offer similar capabilities to Ruby in the area of class definitions; in fact, they are even more efficient when it comes to creating methods for accessing instance variables.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Classes in Ruby</title>
   <link href="http://pthoma.se/2015/11/29/classes-in-ruby/"/>
   <updated>2015-11-29T00:00:00-06:00</updated>
   <id>http://pthoma.se/2015/11/29/classes-in-ruby</id>
   <content type="html">&lt;p&gt;In object-oriented programming, &lt;strong&gt;classes&lt;/strong&gt; are essentially templates for creating new objects. They allow you to describe the basic attributes that members of a class should have, and enable you to establish modes of interaction for the class.&lt;/p&gt;

&lt;p&gt;One way in which classes are very useful is that they allow you to create easily understanable representations of real-world objects in code. Let&amp;#39;s take the example of a car, for example. Here is how you would initialize a &lt;em&gt;Car&lt;/em&gt; object in Ruby:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; 
&lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:make&lt;/span&gt; 
&lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:model&lt;/span&gt; 
&lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:year&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;vi&quot;&gt;@make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; 
  &lt;span class=&quot;vi&quot;&gt;@model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; 
  &lt;span class=&quot;vi&quot;&gt;@year&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What does this code do? Basically, it sets up a template for a car that we can then reuse. Our &lt;strong&gt;intialize&lt;/strong&gt; method set up the required attributes for the car - make, model, and year. Meanwhile, the &lt;strong&gt;attr_reader&lt;/strong&gt; statement allows for quick and easy creation of methods for accessing these attributes of the car.&lt;/p&gt;

&lt;p&gt;What was putting @ before the variable names all about, though? We were creating &lt;strong&gt;instance variables&lt;/strong&gt; for the car object. Instance variables are stored in each individual instance of the object, so you can recall them every time you recall that object. If we kept them as &lt;strong&gt;local&lt;/strong&gt; variables - without the @ - we would lose their values as soon as the initialize method finished, which wouldn&amp;#39;t be very useful! Okay, let&amp;#39;s see how we can interact with this &lt;em&gt;Car&lt;/em&gt; object in practice after entering the code above:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;011&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_miata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Mazda&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Miata&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2009&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Car:0x007fcd531123a8 @make=&amp;quot;Mazda&amp;quot;, @model=&amp;quot;Miata&amp;quot;, @year=2009&amp;amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What did this do? We created a new instance of the &lt;em&gt;Car&lt;/em&gt; object and gave it a make (Mazda), model (Miata), and year (2009). Now we can use our attr_reader methods to look up these attributes of the car:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;012&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_miata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Mazda&amp;quot;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;013&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_miata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Miata&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;014&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_miata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2009&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This kind of basic data initialization, storage, and retrieval is just scratching the surface of what you can do with objects. You can define methods for interaction with objects - think of things like turning the car on or off, or changing some kind of control on the car. As you can see, classes are an extremely powerful feature of Ruby and many other programming languages.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby: The Sort Method</title>
   <link href="http://pthoma.se/2015/11/21/ruby-the-sort-method/"/>
   <updated>2015-11-21T00:00:00-06:00</updated>
   <id>http://pthoma.se/2015/11/21/ruby-the-sort-method</id>
   <content type="html">&lt;p&gt;Ruby contains many powerful tools for the manipulation of data. Many of these tools are available through the Enumerable module, which is available for arrays, hashes, and other objects where an enumerator is defined.&lt;/p&gt;

&lt;p&gt;An especially powerful enumerable method is the &lt;em&gt;sort&lt;/em&gt; method. This method allows for the efficient sorting of data within a data structure. For example, let us suppose we have an array as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arsenal_players&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Per Mertesacker&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Mesut Ozil&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Petr Cech&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Theo Walcott&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Per Mertesacker&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Mesut Ozil&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Petr Cech&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Theo Walcott&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Calling &lt;em&gt;sort&lt;/em&gt; on this array without an argument will default to returning a new array of the previous array sorted by alphabetical order (or numeric order in the case of an array of numbers):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;002&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arsenal_players&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Mesut Ozil&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Per Mertesacker&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Petr Cech&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Theo Walcott&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course &lt;em&gt;sort&lt;/em&gt; also has a destructive method, accessible by &lt;em&gt;sort&lt;/em&gt;!:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;004&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arsenal_players&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort!&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Mesut Ozil&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Per Mertesacker&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Petr Cech&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Theo Walcott&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;005&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arsenal_players&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Mesut Ozil&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Per Mertesacker&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Petr Cech&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Theo Walcott&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The great thing about &lt;em&gt;sort&lt;/em&gt; is that you can change the sort logic. You can do this using the &lt;em&gt;combined comparison operator&lt;/em&gt; which is &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;, also known as the &amp;quot;spaceship operator.&amp;quot; Let&amp;#39;s see the spaceship in action:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;irb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;006&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arsenal_players&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Theo Walcott&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Petr Cech&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Per Mertesacker&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Mesut Ozil&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code&gt;{ |a,b| b &amp;lt;=&amp;gt; a }&lt;/code&gt; argument told &lt;em&gt;sort&lt;/em&gt; to re-sort arsenal_players in reverse alphabetical order; &lt;code&gt;b &amp;lt;=&amp;gt; a&lt;/code&gt; told &lt;em&gt;sort&lt;/em&gt; to iterate through the array using its usual logic but instead of putting item a before item b as it usually would, instead put b before a.&lt;/p&gt;

&lt;p&gt;You can find much more information about customizing the &lt;em&gt;sort&lt;/em&gt; method at &lt;a href=&quot;http://www.evc-cit.info/cit020/beginning-programming/chp_07/custom_sort.html&quot;&gt;this link.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Arrays and Hashes</title>
   <link href="http://pthoma.se/2015/11/15/arrays-and-hashes/"/>
   <updated>2015-11-15T00:00:00-06:00</updated>
   <id>http://pthoma.se/2015/11/15/arrays-and-hashes</id>
   <content type="html">&lt;p&gt;Arrays are a critically important concept in programming. An array can be defined as a collection of data. Much of programming involves manipulating arrays in various ways and programming languages provide a wide variety of tools for doing so.&lt;/p&gt;

&lt;p&gt;There are many different types of arrays. Perhaps the simplest to understand is the one dimensional array which is a simple series of values. The values can be numbers or strings. Such an array can be defined in Ruby as follows: &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
   

&lt;p&gt;or &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;This&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;is&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;string.&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
 

&lt;p&gt;A multidimensional array is an array of arrays. This is useful for storing more complex types of data. For example: &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;cities&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Chicago&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Illinois&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;New York&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;New York&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Los Angeles&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;California&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
 

&lt;p&gt;One critically important variety of array is the &lt;strong&gt;hash&lt;/strong&gt;. A hash or &amp;quot;associative array&amp;quot; is an array that contains unique key-value pairs. Hashes allow for programs to quickly and efficiently locate data by looking up the key for a particular value. An example of a hash in Ruby would be as follows - note Ruby differentiates hashes from arrays by the use of curly braces: &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
&lt;span class=&quot;ss&quot;&gt;milk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;coffee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;ss&quot;&gt;orange_juice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
  

&lt;p&gt;Why would hashes be used over other types of arrays? As mentioned previously, hashes help computers locate data faster than other types of data structures. They are therefore very helpful for storing large amounts of data. As the size of a data structure increases, the amount of computing resources required to retrieve the structure also goes up, so anything that increases the efficiency of searching for data is very welcome.&lt;/p&gt;

&lt;p&gt;One drawback of hashes, though, is that they require every key be unique. This makes them more difficult to use if a data set is likely to have two keys in common. In such a case it might be easier to use an array (if the data set is not too large). Otherwise, it is often possible to figure out some other kind of unique identifier that can serve as the key for the hash.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CSS Classes vs. ID's: Best Practices</title>
   <link href="http://pthoma.se/2015/11/07/css-classes-vs-ids-best-practices/"/>
   <updated>2015-11-07T00:00:00-06:00</updated>
   <id>http://pthoma.se/2015/11/07/css-classes-vs-ids-best-practices</id>
   <content type="html">&lt;p&gt;CSS offers a number of options for designating web page sections that will receive formatting from a CSS stylesheet. These options are known as &amp;quot;selectors&amp;quot; in the parlance of CSS. Two popular selector options are classes and ID&amp;#39;s. These allow the user to apply formatting to specific sections of the page that differ from the default settings that may exist elsewhere in the stylesheet. This blog post will review some best practices for using class and ID selectors.&lt;/p&gt;

&lt;p&gt;An ID selector designates one section of an HTML document that will receive formatting from the CSS stylesheet. ID&amp;#39;s must be unique to that section of the document; they cannot be reused elsewhere in the file. An ID can be designated in HTML as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;id-name&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; ID content &lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The ID is then selected in the CSS stylesheet as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#id-name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;here&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;ID&amp;#39;s may seem unappealing compared to classes, which can be reused across multiple sections of the page. Classes are designated very similarly to ID&amp;#39;s:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;class-name&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; Class content &lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The class is then selected in the CSS stylesheet as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.class-name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;here&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Because classes can be reused, it is tempting to utilize them wherever possible, as they make code much more efficient. There are several cases, however, where ID&amp;#39;s might be preferred. ID&amp;#39;s are useful when you know that only one section of the page will receive certain formatting - for example, a title heading. ID&amp;#39;s also trump classes when a browser decides how to render conflicting CSS, so they are  useful in very complex CSS stylesheets when you want to be certain particular formatting will be applied. In fact, you can even combine an ID with a class to utilize most of the formatting rules from a class while overriding some with an ID. ID&amp;#39;s can also improve accessiblity in some cases.&lt;/p&gt;

&lt;p&gt;So what is best practice for using a class versus an ID? If there is even a chance that one might want to reuse a particular set of formatting, a class is likely the best choice since it will provide for reuse. Thus, a class is likely the best choice in most cases. If, however, you want to make certain that a particular section will receive a certain set of formatting, and you don&amp;#39;t plan on reusing it, then an ID is likely the best option.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Version Control</title>
   <link href="http://pthoma.se/2015/10/21/version-control/"/>
   <updated>2015-10-21T00:00:00-05:00</updated>
   <id>http://pthoma.se/2015/10/21/version-control</id>
   <content type="html">&lt;p&gt;Version control is a crucial technology for programmers, especially when working on collaborative projects. It allows for efficient tracking, implementation, and reverting of changes made to a codebase over time.&lt;/p&gt;

&lt;p&gt;Git is an widely used version control system and was originally created for work on the Linux kernel, one of the most famous open source projects. Git is well known for its speed and efficiency, and its features that allow for many users to collaborate on a project. One of git&amp;#39;s most renowned features is its system for leaving messages on &amp;quot;commits&amp;quot; (code changes), which allows collaborators to explain the intention and reasoning behind their work.&lt;/p&gt;

&lt;p&gt;Many git users choose to store their projects on Github. Github is a free git repository hosting service that has many useful tools to promote collaboration between users. Because of these features Github has developed a wide following across the development community, which makes it an appealing place to communicate with colleagues and showcase work. Many well known open source software projects are hosted on Github and developers of all skill levels are active there.&lt;/p&gt;
</content>
 </entry>
 

</feed>
